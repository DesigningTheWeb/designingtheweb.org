---
title: "Advanced Responsive Techniques"
description: "Design and Accessibility"
date: "2025-02-17"
date-format: long
author: Janyl Jumadinova
format:
  revealjs:
    theme: default
    css: ../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Web Design"
---

## What is Responsive Web Design?

- Adapts layout to different screen sizes
- Enhances usability and accessibility
- Uses flexible grids, media queries, and responsive images
- Ensures content remains readable and usable across devices

---

#### Activity: Analyze Website Responsiveness

1. Open three websites (e.g., [BBC News](https://www.bbc.com), [Wikipedia](https://www.wikipedia.org), [Amazon](https://www.amazon.com))
2. Open Developer Tools in your browser.
3. Use the device toggle to switch to mobile view.
4. Resize the viewport to observe how the layout changes at different breakpoints.

  - When do the layouts change?
  - Which website felt most comfortable on mobile?
  - What elements caused frustration?
  - Did you notice any performance differences?

##### Discussion Points

- Share your observations with the class.
- Discuss which websites provided the best mobile experience and why.
- Identify common issues that hinder mobile usability.

---

### Viewport Meta Tag

- Ensures proper scaling on mobile devices
- Prevents zooming issues and horizontal scrolling

#### Usage
```html
<meta name="viewport" content="width=device-width, initial-scale=1">
```

#### Key Attributes
- `width=device-width`: Matches screen width
- `initial-scale=1`: Sets 1:1 scale ratio
```html
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
```

---

### Media Queries: Adapting Layouts

#### Syntax
```css
@media (max-width: 600px) {
  body {
    background-color: lightblue;
  }
}
```

#### Common Breakpoints
- Small screens: `max-width: 600px`
- Tablets: `max-width: 768px`
- Desktops: `min-width: 1024px`

[**Example**](responsive_example.html)
---

### Advanced Media Queries

#### Combining Conditions
```css
@media (min-width: 600px) and (max-width: 900px) {
  body {
    font-size: 18px;
  }
}
```

---

### Advanced Media Queries

#### Switch to Vertical Layout
```css
@media (max-width: 768px) {
  .nav {
    display: flex;
    flex-direction: column;
  }
}
```

---

### Advanced Media Queries

#### Orientation-Based Styling
```css
@media (orientation: landscape) {
  body {
    background-color: lightgray;
  }
}
```

---

### Advanced Media Queries

#### Dark Mode Support
```css
@media (prefers-color-scheme: dark) {
  body {
    background-color: black;
    color: white;
  }
}
```

---

### Flexible Grids: Fluid Layouts

- Use percentages instead of fixed widths
- Example:

```css
.container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
}
```

---

### Using Flexbox for Responsiveness
```css
.flex-container {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}
.flex-item {
  flex: 1 1 200px;
}
```

---

### Responsive Images

#### `max-width` for Scalability
```css
img {
  max-width: 100%;
  height: auto;
}
```

#### `picture` for Adaptive Images
```html
<picture>
  <source srcset="color_glow.jpg" media="(min-width: 1024px)">
  <source srcset="color_glow.jpg" media="(min-width: 600px)">
  <img src="color_glow.jpg" alt="A responsive image">
</picture>
```

---

### Image Optimization Tips
- Use modern formats like **WebP** for smaller file sizes
- Implement **lazy loading** with `loading="lazy"`
- Serve **different image resolutions** with `srcset`

---

### Mobile-Friendly Typography

- Use **relative units** (`em`, `rem`, `vw`, `vh`)
- Set `line-height` for better readability
- Example:
```css
body {
  font-size: 1rem;
  line-height: 1.6;
}
```

---

### Best Practices

- Use `em` or `rem` for font sizes
- Avoid fixed widths (`px`)
- Test designs on real devices & emulators
- Optimize images for fast loading
- Ensure **touch-friendly** elements (buttons & links should be at least `48px` tall)

---

## Summary

- **Viewport meta tag** ensures correct mobile scaling
- **Media Queries** adjust styles based on screen size
- **Flexible Grids & Flexbox** make layouts adapt dynamically
- **Responsive Images** optimize loading for devices
- **Mobile-friendly typography** improves readability
- **Best practices** ensure usability across all devices

**Next Steps:** Apply these concepts in your projects!
